/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./script.js":
/*!*******************!*\
  !*** ./script.js ***!
  \*******************/
/***/ (() => {

eval("//import moduleName from 'axios';\r\n\r\n// APIエンドポイントとキー（gooラボのAPIキーが必要）\r\nconst API_URL = 'https://labs.goo.ne.jp/api/hiragana';\r\nconst API_KEY = '7dd726c3e3bd92948d538e80c0773656d7b89328b3eb400a11e893efe91f7a12';\r\n\r\n// 音声認識設定\r\nlet timeLimit;\r\nlet targetCorrect = 0;\r\nlet correctAnswers = 0;\r\nlet mistakes = 0;\r\nlet correctWordsArray = [];\r\nlet mistakeWordsArray = [];\r\nlet unclearWordsArray = []; // 不明瞭な単語用の配列\r\nlet currentWord;\r\nlet gameIsOver = false;\r\n\r\nconst sr = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\nsr.interimResults = false;\r\nsr.continuous = true;\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function () {\r\n    const timerInput = document.getElementById(\"timerInput\");\r\n    const targetInput = document.getElementById(\"targetInput\");\r\n    const startButton = document.getElementById(\"start-button\");\r\n    const warningMessage = document.getElementById(\"warning\");\r\n    const initialScreen = document.getElementById(\"initial-screen\");\r\n    const playingScreen = document.getElementById(\"playing-screen\");\r\n    const wordDisplay = document.getElementById(\"wordDisplay\");\r\n    const timerDisplay = document.getElementById(\"timerDisplay\");\r\n    const textLog = document.getElementById(\"textLog\");\r\n\r\n    startButton.addEventListener(\"click\", function () {\r\n        const enteredTarget = parseInt(targetInput.value);\r\n        const enteredTime = parseInt(timerInput.value);\r\n        const selectedTarget = document.querySelector('input[name=\"targetCorrect\"]:checked');\r\n        const selectedTime = document.querySelector('input[name=\"timer\"]:checked');\r\n\r\n        if (selectedTarget || selectedTime) {\r\n            targetCorrect = selectedTarget ? parseInt(selectedTarget.value) : 0;\r\n            timeLimit = selectedTime ? parseInt(selectedTime.value) : 0;\r\n\r\n            initialScreen.classList.add('hidden');\r\n            playingScreen.classList.remove('hidden');\r\n            startGame();\r\n        } else if (enteredTarget > 0 && enteredTime > 0) {\r\n            timeLimit = enteredTime;\r\n            targetCorrect = enteredTarget;\r\n            initialScreen.classList.add('hidden');\r\n            playingScreen.classList.remove('hidden');\r\n            startGame();\r\n        } else {\r\n            warningMessage.classList.remove('hidden');\r\n        }\r\n    });\r\n\r\n    function startGame() {\r\n        currentWord = getRandomWord();\r\n        wordDisplay.textContent = currentWord;\r\n        correctAnswers = 0;\r\n        mistakes = 0;\r\n        unclearWordsArray = []; // 初期化\r\n        timerDisplay.textContent = \"Time: \" + timeLimit;\r\n        sr.start();\r\n        timer();\r\n    }\r\n\r\n    function timer() {\r\n        if (timeLimit > 0) {\r\n            timeLimit--;\r\n            timerDisplay.textContent = \"Time: \" + timeLimit;\r\n            setTimeout(timer, 1000);\r\n        } else {\r\n            endGame();\r\n        }\r\n    }\r\n\r\n    sr.addEventListener(\"result\", async function (e) {\r\n        const lastResult = e.results[e.results.length - 1][0].transcript.trim();\r\n\r\n        try {\r\n            // ひらがな化APIを使用して変換\r\n            const hiraganaResult = await convertToHiragana(lastResult);\r\n            const normalizedLastResult = hiraganaResult.converted; // APIの結果を使用\r\n            const normalizedCurrentWord = currentWord; // 現在の単語もそのまま保持\r\n\r\n            textLog.innerHTML = \"<div>\" + normalizedLastResult + (normalizedLastResult === normalizedCurrentWord ? \" 正解！！！\" : \" 残念！！！\") + \"</div>\";\r\n\r\n            if (normalizedLastResult === normalizedCurrentWord) {\r\n                correctAnswers++;\r\n                correctWordsArray.push(currentWord);\r\n            } else {\r\n                mistakes++;\r\n                mistakeWordsArray.push(lastResult + \"(\" + currentWord + \")\");\r\n                if (lastResult === \"\") {\r\n                    unclearWordsArray.push(currentWord); // 空の場合は不明瞭単語として記録\r\n                }\r\n            }\r\n\r\n            currentWord = getRandomWord();\r\n            wordDisplay.textContent = currentWord;\r\n\r\n        } catch (error) {\r\n            console.error('ひらがな化APIエラー:', error);\r\n        }\r\n    });\r\n\r\n    sr.addEventListener(\"end\", function () {\r\n        if (!gameIsOver) {\r\n            sr.start();\r\n        }\r\n    });\r\n});\r\n\r\n// ひらがな化APIを呼び出す関数\r\nasync function convertToHiragana(text) {\r\n    const response = await axios.post(API_URL, {\r\n        app_id: API_KEY,\r\n        sentence: text,\r\n        output_type: 'hiragana'\r\n    });\r\n    return response.data;\r\n}\r\n\r\nfunction getRandomWord() {\r\n    const words = [\r\n        \"かき氷\", \"金魚\", \"晴れ\", \"音\", \"風\", \"耳\", \"夏\", \"うちわ\", \"茶碗\", \"季節\",\r\n        \"着物\", \"緑\", \"地図\", \"冒険\", \"文化\", \"夕焼け\", \"平和\", \"自然\", \"魔法\", \"理想\",\r\n        \"机\", \"電話\", \"家族\", \"星空\", \"桜\", \"山\", \"本\", \"空\", \"夢\", \"笑顔\",\r\n        \"思い出\", \"月\", \"飛行機\", \"映画\", \"世界\", \"感情\", \"レストラン\", \"旅行\", \"地平線\", \"悲しみ\",\r\n        \"偽り\", \"祭り\", \"日常\", \"運命\", \"形\", \"希望\", \"マサチューセッツ州\", \"瞬間\", \"逆境\"\r\n    ];\r\n    return words[Math.floor(Math.random() * words.length)];\r\n}\r\n\n\n//# sourceURL=webpack:///./script.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./script.js"]();
/******/ 	
/******/ })()
;